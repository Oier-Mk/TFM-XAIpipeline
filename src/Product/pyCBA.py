import pandas as pd
import warnings
import rpy2.robjects as robjects
from rpy2.robjects import pandas2ri

robjects.r.source("rCBA.R", encoding="UTF-8")
pandas2ri.activate()


def initialize(data, train_size, support, confidence):
    """
    Initializes a model by calling the init_model function in R and extracting
    transactions, rules, and weights.
    
    Args:
        data (str): File path of the filtered data. train_size (float): Ratio to
        split the data into training and testing sets. support (float): Minimum
        support threshold for CARs (Classification Association Rules).
        confidence (float): Minimum confidence threshold for CARs.
        
    Returns:
        tuple: A tuple containing transactions, rules, and weights.
    """

    warnings.warn("Beware that you are using an AI model and that human supervision is necessary to make decisions.")

    # Call init_model function in R
    l = robjects.r['init_model'](data, train_size, support, confidence)
    
    # Extract transactions, rules, and weights
    transactions = l.rx2('transactions')  # Extract transactions from the R list
    rules = l.rx2('rules')  # Extract rules from the R list
    weights = l.rx2('weigths')  # Extract weights from the R list
    
    return transactions, rules, weights



def predict(transactions, rules, weights, to_predict, get_rules=False):
    """
    Makes predictions using a classification model based on association rules.
    
    Args:
        transactions (DataFrame): Transactions used to train the model.
        rules (list): Rules generated by the model.
        weights (list): Weights associated with the transactions.
        to_predict (list): New data to make predictions on.
        get_rules (bool, optional): Whether to return the rules used for prediction (default is False).
        
    Returns:
        tuple: A tuple containing the prediction and optionally the rules used for prediction.
    """
    # Convert to_predict to R DataFrame
    to_predict = robjects.vectors.DataFrame(to_predict)
    
    # Convert get_rules to R BooleanVector
    boolean = robjects.BoolVector([False])
    if get_rules: 
        boolean = robjects.BoolVector([True])
    
    # Call predict_model function in R
    l = robjects.r['predict_model'](transactions, rules, weights, to_predict, boolean)
    
    # Extract prediction and rules from the R list
    prediction = l[0][0]
    rules = robjects.conversion.rpy2py(l[1]) if get_rules else None

    return prediction, rules


if __name__ == "__main__":

    transactions, rules, weights = initialize("../data/Statlog_rCBA.csv", 0.7,0.01, 0.01)

    df = pd.DataFrame({
        'Status.of.existing.checking.account': ['< 0 DM'],
        'Duration.in.month': ['(3~12]'],
        'Credit.history': ['critical account'],
        'Purpose': ['radio/television'],
        'Credit.amount': ['(249~1.26e+03]'],
        'Savings.account.bonds': ['unknown/no savings'],
        'Present.employment.since': ['>= 7 years'],
        'Installment.rate.in.percentage.of.disposable.income': ['(3~4]'],
        'Other.debtors...guarantors': ['none'],
        'Present.residence.since': ['(2~4]'],
        'Age.in.years': ['(45~75]'],
        'Other.installment.plans': ['none'],
        'Housing': ['own'],
        'Number.of.existing.credits.at.this.bank': ['(0~2]'],
        'Job': ['skilled employee'],
        'Number.of.people.being.liable.to.provide.maintenance.for': ['(0~2]'],
        'Telephone': ['yes~ registered'],
        'Foreign.worker': ['yes'],
        'Gender': ['male'],
        'Marital.Status': ['single']
    })

    p = predict(transactions, rules, weights, df, True)
    print(p)